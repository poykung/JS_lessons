การเขียนเพื่อเรียกใช้งาน JS
มี 2 รูปแบบ internal / external

 <!-- inrernal JS--> เรียกใช้งานภายใน file
    <script type="text/javascript">
        document.write("<h1>Hello JS</h1>");
    </script>

External การเรียกใช้งานภายนอก file ให้ทำงานสร้าง file และตั้งนามสกุลเป็น .JS
จากนั้นให้เรียกใช้ผ่าน tag <script src="(ชื่อ file)"></script>

การแสดงผลข้อมูล JS
document.write("ข้อความที่ต้องการแสดง"); เป็นการแสดงข้อความที่ต้องการแสดงในหน้า web โดยสามารถใส่ tag html เข้าไปแทรกภายในได้
alert("ข้อความแจ้งเตือน"); สำหรับแจ้งเตือนผู้ใช้งานหน้าเว็บ
Console.log("ข้อความ หรือ ตัวแปร") สำหรับ debug ค่าต่างๆ แต่จะไม่แสดงผลในหน้าเว็บ
console.log("");
console.warn("");
console.error("");

การสร้างตัวแปร variable
การนิยามตัวแปร js ในปัจจุบัน จะขึ้นต้นด้วย let ตามด้วยชื่อของตัวแปร โดยชนิดของตัวแปรจะเป็นแบบ dynamic variable
คือไม่ต้องระบุข้อมูลของชนิดตัวแปรว่าเป็นข้อความ หรือ ตัวเลข
let $Fname = "Thaweekhun"; //string
let $Lname = "Ninkhammee"; //string
let $Age = 23; //number integer
let $weight = 60.1; //number float
let $height = 169.9; //number float
let $gender = true; //boolean

Type Conversation การแปลงชนิดข้อมูล
แปลงจาก string เป็น number ให้ใช้ +ค่าในตัวแปร หรือใช้คำสั่ง .toString(); ต่อจากค่าในตัวแปร
แปลงจาก number เป็น string ให้ใช้ +ค่าในตัวแปร หรือใช้ parseInt(""); or parseFloat(""); คลุมค่าในตัวแปร

Array คือตัวแปรที่เก็บชนิดข้อมูลที่เป็นกลุ่มโดยสามารถเก็บข้อมูลที่ต่างชนิดกันได้มีการเรียกประกาศใช้ตัวแปรนี้ 2 วิธี
1. คือ ชื่อตัวแปร = คำสั่ง Array();
2. ชื่อตัวแปร = [(ค่าในตัวแปร)];
หากต้องการเข้าถึงข้อมูลที่เก็บลงในตัวแปร array ให้อ้างอิงถึงตำแหน่ง index โดยจะเริ่มนับจาก 0 .... ไปจนถึงตำแหน่งที่ต้องการเข้าถึงข้อมูล

Operator ตัวดำเนินการ + - * / %(หารเอาเศษ)
Operand ตัวถูกดำเนินการ 5+5 5 คือตัวถูกดำเนินการ

ตัวดำเนินการเชิงเปรียบเทียบ == > < >= <= != !(แสดงผลขั้วตรงข้าม)

Operator ตัวเนินการทางตรรกศาสตร์ AND OR NOT
AND เงื่อนไขเป็นจริงทั้งคู่ True/True = True
OR เงื่อไขตัวใดตัวหนึ่งเป็นจริง True/False , False/True = True
NOT เงื่อไขทั้งคู่ต้องไม่เป็นจริง False/False = True

Operator การเพิ่ม/ลดค่า มี 2 รูปแบบ prefix ++(ตัวแปร) / postfix (ตัวแปร)++ ความแตกต่างคือ
prefix เป็นการเพิ่มค่าในบรรทัด / postfix เป็นการแสดงค่าในตัวแปรก่อน แล้วจึงทำการเพิ่มค่าในบรรทัดถัดไป

Compund Assignment เป็นการลดรูปของ operator ที่ใช้เขียนให้มีรูปแบบที่สั้นลง
A = 10 , B = 10 โดยปกติแล้วหากต้องการคำนวณทางคณิตศาสตร์จะเขียนในรูป A = A+B
แต่การใช้ compound assignment จะเขียนลดรูปเช่น A += B

ความสำคัญของ Operator
การคำนวณทางคณิตศาสตร์โดย operator จะคำนวณโดยเรียงลำดับความสำคัญ
1.()
2. ++ -- มีความสำคัญเท่ากัน แต่หากมีทั้งสองภายในบรรทัดจะทำงานจากด้านซ้ายไปด้านขวา
3. * / %
4. + - มีความสำคัญเท่ากัน 

Control Structure โครงสร้างควบคุม (กลุ่มคำสั่งที่ใช้ควบคุมการทำงานของโปรแกรม)
แบบลำดับ (Sequence) ทำงานโดยเรียงลำดับ

แบบมีเงื่อนไข (Condition)
IF ทำงานโดยการเช็คเงื่อนไขในคำสั่ง (คำสั่ง) หากเงื่อนไขเป็นจริงจะทำงานใน block ที่ต้องการให้แสดงผลการทำงาน{
(ทำงานใน block นี้เมื่อเงื่อนไขเป็น true){
}esle if{
(ทำงานใน block เมื่อเงื่อนไขแรกไม่เป็นจริงและเช็คเงื่อนไขไปเรื่อยๆจนกว่าจะมีเงื่อนไขที่เป็นจริงหรือเป็นเท็จตามโครงสร้างของคำสั่ง)
}else{
(ทำงานใน block นี้เมื่อเงื่อนไขเป็น faluse)
}

Switch/Case เป็นการกำหนดเงื่อนไขในการทำงานเหมือนกับ if else
แต่เหมาะสำหรับในการเช็คเงื่อนไขในโปรแกรมที่ไม่ซับซ้อน โดยการเช็คเงื่อนไขจะเป็นการระบุ case ที่ตรงตัวเท่านั้นจึงจะทำงานในคำสั่ง
switch (ค่าตัวแปรที่ต้องการเช็ค){
    case (กำหนด case ของตัวแปรที่ต้องการเช็ค) : (เมื่อดเช็คเงื่อนไขแล้วต้องการให้ทำอะไร);
        break; (หลังจากเช็คเงื่อนไขแล้วให้จบการทำงานด้วย break;)
}default : (เมื่อทำการเช็คเงื่อนไขแล้วหากเงื่อนไขไม่ต้องให้ออกมาทำงานที่คำสั่ง default เหมือน else);



แบบทำซ้ำ (Loop) มี 3 แบบ
while
for ใช้ในกรณีที่ทราบจำนวนที่ต้องการให้ทำซ้ำอย่างชัดเจน
do while ทำคำสั่งในเงื่อนไขก่อน 1 รอบแล้วจึงลงไปเช็คเงื่อนไขว่าต้องการทำซ้ำอีกหรือไม่

Function
เป็นการประกาศชุดคำสั่งหนึ่ง เพื่อนำไปเรียกใช้ให้เกิดความสะดวกลดการเขียนข้อมูลซ้ำซ้อนโดยจะประกาศ function ตามด้วยสิ่งที่อยู่ใน function
ที่ต้องการให้โปรแกรมทำงาน
การเรียกใช้ function (ชื่อ function){
    (คำสั่งที่ต้องการให้ทำงาน)
}

